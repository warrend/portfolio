{"version":3,"sources":["atoms/constants.js","images/github-icon.svg","images/linkedin-icon.svg","images/codepen-icon.svg","images/external-icon.svg","theme.js","screens/Loading/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["theTheme","theme","atom","key","default","colors","primary","font","lightFont","border","spacing","tiny","xSmall","small","normal","large","xLarge","giant","xGiant","huge","xHuge","jumbo","xJumbo","sizes","input","borderRadius","pill","borderRadiusSmall","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","typography","mainTitle","subtitle","body","images","githubIcon","linkedinIcon","codepenIcon","externalIcon","Loading","props","Main","lazy","Art","FourZeroFour","App","useRecoilState","constants","fallback","path","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ac695ba1.chunk.js","sourcesContent":["import { atom } from \"recoil\";\nimport theme from \"../theme\";\n\nconst theTheme = theme;\n\nexport default {\n  theme: atom({\n    key: \"theme\",\n    default: theTheme,\n  }),\n};\n","export default __webpack_public_path__ + \"static/media/github-icon.c64cb926.svg\";","export default __webpack_public_path__ + \"static/media/linkedin-icon.ca2c426b.svg\";","export default __webpack_public_path__ + \"static/media/codepen-icon.2f2cb152.svg\";","export default __webpack_public_path__ + \"static/media/external-icon.8c33c212.svg\";","import githubIcon from \"images/github-icon.svg\";\nimport linkedinIcon from \"images/linkedin-icon.svg\";\nimport codepenIcon from \"images/codepen-icon.svg\";\nimport externalIcon from \"images/external-icon.svg\";\n\n// const COLORS = {\n//   primary: \"hsl(233, 67%, 52%)\",\n//   font: \"hsl(0, 0%, 7%)\",\n//   lightFont: \"hsl(0, 0%, 70%)\",\n//   border: \"hsl(0, 0%, 92%)\",\n// };\n\nconst COLORS = {\n  primary: \"hsl(207, 93%, 62%)\",\n  font: \"hsl(0, 0%, 7%)\",\n  lightFont: \"hsl(0, 0%, 70%)\",\n  border: \"hsl(207, 93%, 92%)\",\n};\n\nconst TYPOGRAPHY = {\n  mainTitle: `600 24px Inter`,\n  subtitle: `500 18x Inter`,\n  body: `400 14px Inter`,\n  small: `500 10px Inter`,\n};\n\nconst SPACING = {\n  tiny: \"4px\",\n  xSmall: \"8px\",\n  small: \"12px\",\n  normal: \"16px\",\n  large: \"24px\",\n  xLarge: \"32px\",\n  giant: \"48px\",\n  xGiant: \"64px\",\n  huge: \"96px\",\n  xHuge: \"128px\",\n  jumbo: \"192px\",\n  xJumbo: \"256px\",\n};\n\nconst SIZES = {\n  input: \"52px\",\n  borderRadius: \"25px\",\n  pill: \"25px\",\n  borderRadiusSmall: \"15px\",\n};\n\nconst DEVICE = {\n  mobileS: `(min-width: 320px)`,\n  mobileM: `(min-width: 375px)`,\n  mobileL: `(min-width: 425px)`,\n  tablet: `(min-width: 768px)`,\n  laptop: `(min-width: 1024px)`,\n  laptopL: `(min-width: 1440px)`,\n  desktop: `(min-width: 2560px)`,\n  desktopL: `(min-width: 2560px)`,\n};\nexport default {\n  colors: COLORS,\n  spacing: SPACING,\n  sizes: SIZES,\n  device: DEVICE,\n  typography: TYPOGRAPHY,\n  images: {\n    githubIcon,\n    linkedinIcon,\n    codepenIcon,\n    externalIcon,\n  },\n};\n","import React from \"react\";\n\nfunction Loading(props) {\n  return <div>Loading...</div>;\n}\n\nexport default Loading;\n","import React, { lazy, Suspense } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport Loading from \"screens/Loading\";\nimport constants from \"atoms/constants\";\n\nconst Main = lazy(() => import(\"screens/Main\"));\nconst Art = lazy(() => import(\"screens/Art\"));\nconst FourZeroFour = lazy(() => import(\"screens/FourZeroFour\"));\n\nfunction App() {\n  const [theme] = useRecoilState(constants.theme);\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route path=\"/\">\n              <Main />\n            </Route>\n            <Route path=\"/art\" exact>\n              <Art />\n            </Route>\n            <Route>\n              <FourZeroFour />\n            </Route>\n          </Switch>\n        </Suspense>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Loading from \"screens/Loading\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={<Loading />}>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}